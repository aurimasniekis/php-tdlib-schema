<?php

/**
 * This phpFile is auto-generated.
 */

declare(strict_types=1);

namespace AurimasNiekis\TdLibSchema;

/**
 * Represents a local file
 */
class LocalFile extends TdObject
{
    public const TYPE_NAME = 'localFile';

    /**
     * Local path to the locally available file part; may be empty
     *
     * @var string
     */
    protected string $path;

    /**
     * True, if it is possible to try to download or generate the file
     *
     * @var bool
     */
    protected bool $canBeDownloaded;

    /**
     * True, if the file can be deleted
     *
     * @var bool
     */
    protected bool $canBeDeleted;

    /**
     * True, if the file is currently being downloaded (or a local copy is being generated by some other means)
     *
     * @var bool
     */
    protected bool $isDownloadingActive;

    /**
     * True, if the local copy is fully available
     *
     * @var bool
     */
    protected bool $isDownloadingCompleted;

    /**
     * Download will be started from this offset. downloaded_prefix_size is calculated from this offset
     *
     * @var int
     */
    protected int $downloadOffset;

    /**
     * If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix
     *
     * @var int
     */
    protected int $downloadedPrefixSize;

    /**
     * Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage
     *
     * @var int
     */
    protected int $downloadedSize;

    public function __construct(
        string $path,
        bool $canBeDownloaded,
        bool $canBeDeleted,
        bool $isDownloadingActive,
        bool $isDownloadingCompleted,
        int $downloadOffset,
        int $downloadedPrefixSize,
        int $downloadedSize
    ) {
        $this->path = $path;
        $this->canBeDownloaded = $canBeDownloaded;
        $this->canBeDeleted = $canBeDeleted;
        $this->isDownloadingActive = $isDownloadingActive;
        $this->isDownloadingCompleted = $isDownloadingCompleted;
        $this->downloadOffset = $downloadOffset;
        $this->downloadedPrefixSize = $downloadedPrefixSize;
        $this->downloadedSize = $downloadedSize;
    }

    public static function fromArray(array $array): LocalFile
    {
        return new static(
            $array['path'],
            $array['can_be_downloaded'],
            $array['can_be_deleted'],
            $array['is_downloading_active'],
            $array['is_downloading_completed'],
            $array['download_offset'],
            $array['downloaded_prefix_size'],
            $array['downloaded_size'],
        );
    }

    public function typeSerialize(): array
    {
        return [
            '@type' => static::TYPE_NAME,
            'path' => $this->path,
            'can_be_downloaded' => $this->canBeDownloaded,
            'can_be_deleted' => $this->canBeDeleted,
            'is_downloading_active' => $this->isDownloadingActive,
            'is_downloading_completed' => $this->isDownloadingCompleted,
            'download_offset' => $this->downloadOffset,
            'downloaded_prefix_size' => $this->downloadedPrefixSize,
            'downloaded_size' => $this->downloadedSize,
        ];
    }

    public function getPath(): string
    {
        return $this->path;
    }

    public function getCanBeDownloaded(): bool
    {
        return $this->canBeDownloaded;
    }

    public function getCanBeDeleted(): bool
    {
        return $this->canBeDeleted;
    }

    public function getIsDownloadingActive(): bool
    {
        return $this->isDownloadingActive;
    }

    public function getIsDownloadingCompleted(): bool
    {
        return $this->isDownloadingCompleted;
    }

    public function getDownloadOffset(): int
    {
        return $this->downloadOffset;
    }

    public function getDownloadedPrefixSize(): int
    {
        return $this->downloadedPrefixSize;
    }

    public function getDownloadedSize(): int
    {
        return $this->downloadedSize;
    }
}
